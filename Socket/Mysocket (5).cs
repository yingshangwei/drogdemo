// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mysocket.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from mysocket.proto</summary>
public static partial class MysocketReflection {

  #region Descriptor
  /// <summary>File descriptor for mysocket.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static MysocketReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg5teXNvY2tldC5wcm90byIvCg1SZWdpc3RlcmVkUmVxEgwKBG5hbWUYASAB",
          "KAkSEAoIcGFzc3dvcmQYAiABKAkiHAoNUmVnaXN0ZXJlZFJlcxILCgNyZXMY",
          "ASABKA0iKgoITG9naW5SZXESDAoEbmFtZRgBIAEoCRIQCghwYXNzd29yZBgC",
          "IAEoCSIXCghMb2dpblJlcxILCgNyZXMYASABKA0iYgoKT3BlcmF0ZVJlcRIM",
          "CgRuYW1lGAEgASgJEgoKAm14GAIgASgFEgoKAm15GAMgASgFEgoKAm16GAQg",
          "ASgFEgoKAnJ4GAUgASgFEgoKAnJ5GAYgASgFEgoKAnJ6GAcgASgFImIKCk9w",
          "ZXJhdGVSZXMSDAoEbmFtZRgBIAEoCRIKCgJteBgCIAEoBRIKCgJteRgDIAEo",
          "BRIKCgJtehgEIAEoBRIKCgJyeBgFIAEoBRIKCgJyeRgGIAEoBRIKCgJyehgH",
          "IAEoBSJeCglQb3NTeW5SZXMSDAoEbmFtZRgBIAEoCRIJCgF4GAIgASgFEgkK",
          "AXkYAyABKAUSCQoBehgEIAEoBRIKCgJyeBgFIAEoBRIKCgJyeRgGIAEoBRIK",
          "CgJyehgHIAEoBSJeCglQb3NTeW5SZXESDAoEbmFtZRgBIAEoCRIJCgF4GAIg",
          "ASgFEgkKAXkYAyABKAUSCQoBehgEIAEoBRIKCgJyeBgFIAEoBRIKCgJyeRgG",
          "IAEoBRIKCgJyehgHIAEoBSI7CghGcmFtSGVhZBIOCgZmcmFtaWQYASABKAUS",
          "DgoGb3B0bnVtGAIgASgFEg8KB2ZyYW1lbmQYAyABKAgiWQoHRnJhbU9wdBIK",
          "CgJpZBgBIAEoBRIUCgxkb3BsYXllcm5hbWUYAiABKAkSDgoGb3B0eXBlGAMg",
          "ASgFEgsKA2RpchgEIAEoBRIPCgdza2lsbGlkGAUgASgFIkYKC0ZyYW1QYWNr",
          "YWdlEg4KBmZyYW1pZBgBIAEoBRIPCgdmcmFtZW5kGAIgASgIEhYKBG9wdHMY",
          "AyADKAsyCC5GcmFtT3B0IjYKBk9wdFJlcRIOCgZvcHR5cGUYASABKAUSCwoD",
          "ZGlyGAIgASgFEg8KB3NraWxsaWQYAyABKAViBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::RegisteredReq), global::RegisteredReq.Parser, new[]{ "Name", "Password" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RegisteredRes), global::RegisteredRes.Parser, new[]{ "Res" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LoginReq), global::LoginReq.Parser, new[]{ "Name", "Password" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LoginRes), global::LoginRes.Parser, new[]{ "Res" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OperateReq), global::OperateReq.Parser, new[]{ "Name", "Mx", "My", "Mz", "Rx", "Ry", "Rz" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OperateRes), global::OperateRes.Parser, new[]{ "Name", "Mx", "My", "Mz", "Rx", "Ry", "Rz" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PosSynRes), global::PosSynRes.Parser, new[]{ "Name", "X", "Y", "Z", "Rx", "Ry", "Rz" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PosSynReq), global::PosSynReq.Parser, new[]{ "Name", "X", "Y", "Z", "Rx", "Ry", "Rz" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FramHead), global::FramHead.Parser, new[]{ "Framid", "Optnum", "Framend" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FramOpt), global::FramOpt.Parser, new[]{ "Id", "Doplayername", "Optype", "Dir", "Skillid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FramPackage), global::FramPackage.Parser, new[]{ "Framid", "Framend", "Opts" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OptReq), global::OptReq.Parser, new[]{ "Optype", "Dir", "Skillid" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class RegisteredReq : pb::IMessage<RegisteredReq> {
  private static readonly pb::MessageParser<RegisteredReq> _parser = new pb::MessageParser<RegisteredReq>(() => new RegisteredReq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RegisteredReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MysocketReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisteredReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisteredReq(RegisteredReq other) : this() {
    name_ = other.name_;
    password_ = other.password_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisteredReq Clone() {
    return new RegisteredReq(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 2;
  private string password_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RegisteredReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RegisteredReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Password != other.Password) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Password);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RegisteredReq other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          Password = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class RegisteredRes : pb::IMessage<RegisteredRes> {
  private static readonly pb::MessageParser<RegisteredRes> _parser = new pb::MessageParser<RegisteredRes>(() => new RegisteredRes());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RegisteredRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MysocketReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisteredRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisteredRes(RegisteredRes other) : this() {
    res_ = other.res_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisteredRes Clone() {
    return new RegisteredRes(this);
  }

  /// <summary>Field number for the "res" field.</summary>
  public const int ResFieldNumber = 1;
  private uint res_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Res {
    get { return res_; }
    set {
      res_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RegisteredRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RegisteredRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Res != other.Res) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Res != 0) hash ^= Res.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Res != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Res);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Res != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Res);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RegisteredRes other) {
    if (other == null) {
      return;
    }
    if (other.Res != 0) {
      Res = other.Res;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Res = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class LoginReq : pb::IMessage<LoginReq> {
  private static readonly pb::MessageParser<LoginReq> _parser = new pb::MessageParser<LoginReq>(() => new LoginReq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LoginReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MysocketReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginReq(LoginReq other) : this() {
    name_ = other.name_;
    password_ = other.password_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginReq Clone() {
    return new LoginReq(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 2;
  private string password_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LoginReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LoginReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Password != other.Password) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Password);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LoginReq other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          Password = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class LoginRes : pb::IMessage<LoginRes> {
  private static readonly pb::MessageParser<LoginRes> _parser = new pb::MessageParser<LoginRes>(() => new LoginRes());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LoginRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MysocketReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginRes(LoginRes other) : this() {
    res_ = other.res_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginRes Clone() {
    return new LoginRes(this);
  }

  /// <summary>Field number for the "res" field.</summary>
  public const int ResFieldNumber = 1;
  private uint res_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Res {
    get { return res_; }
    set {
      res_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LoginRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LoginRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Res != other.Res) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Res != 0) hash ^= Res.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Res != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Res);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Res != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Res);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LoginRes other) {
    if (other == null) {
      return;
    }
    if (other.Res != 0) {
      Res = other.Res;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Res = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class OperateReq : pb::IMessage<OperateReq> {
  private static readonly pb::MessageParser<OperateReq> _parser = new pb::MessageParser<OperateReq>(() => new OperateReq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OperateReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MysocketReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OperateReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OperateReq(OperateReq other) : this() {
    name_ = other.name_;
    mx_ = other.mx_;
    my_ = other.my_;
    mz_ = other.mz_;
    rx_ = other.rx_;
    ry_ = other.ry_;
    rz_ = other.rz_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OperateReq Clone() {
    return new OperateReq(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "mx" field.</summary>
  public const int MxFieldNumber = 2;
  private int mx_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Mx {
    get { return mx_; }
    set {
      mx_ = value;
    }
  }

  /// <summary>Field number for the "my" field.</summary>
  public const int MyFieldNumber = 3;
  private int my_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int My {
    get { return my_; }
    set {
      my_ = value;
    }
  }

  /// <summary>Field number for the "mz" field.</summary>
  public const int MzFieldNumber = 4;
  private int mz_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Mz {
    get { return mz_; }
    set {
      mz_ = value;
    }
  }

  /// <summary>Field number for the "rx" field.</summary>
  public const int RxFieldNumber = 5;
  private int rx_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Rx {
    get { return rx_; }
    set {
      rx_ = value;
    }
  }

  /// <summary>Field number for the "ry" field.</summary>
  public const int RyFieldNumber = 6;
  private int ry_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Ry {
    get { return ry_; }
    set {
      ry_ = value;
    }
  }

  /// <summary>Field number for the "rz" field.</summary>
  public const int RzFieldNumber = 7;
  private int rz_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Rz {
    get { return rz_; }
    set {
      rz_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OperateReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OperateReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Mx != other.Mx) return false;
    if (My != other.My) return false;
    if (Mz != other.Mz) return false;
    if (Rx != other.Rx) return false;
    if (Ry != other.Ry) return false;
    if (Rz != other.Rz) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Mx != 0) hash ^= Mx.GetHashCode();
    if (My != 0) hash ^= My.GetHashCode();
    if (Mz != 0) hash ^= Mz.GetHashCode();
    if (Rx != 0) hash ^= Rx.GetHashCode();
    if (Ry != 0) hash ^= Ry.GetHashCode();
    if (Rz != 0) hash ^= Rz.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Mx != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Mx);
    }
    if (My != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(My);
    }
    if (Mz != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Mz);
    }
    if (Rx != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Rx);
    }
    if (Ry != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Ry);
    }
    if (Rz != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Rz);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Mx != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mx);
    }
    if (My != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(My);
    }
    if (Mz != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mz);
    }
    if (Rx != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rx);
    }
    if (Ry != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ry);
    }
    if (Rz != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rz);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OperateReq other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Mx != 0) {
      Mx = other.Mx;
    }
    if (other.My != 0) {
      My = other.My;
    }
    if (other.Mz != 0) {
      Mz = other.Mz;
    }
    if (other.Rx != 0) {
      Rx = other.Rx;
    }
    if (other.Ry != 0) {
      Ry = other.Ry;
    }
    if (other.Rz != 0) {
      Rz = other.Rz;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 16: {
          Mx = input.ReadInt32();
          break;
        }
        case 24: {
          My = input.ReadInt32();
          break;
        }
        case 32: {
          Mz = input.ReadInt32();
          break;
        }
        case 40: {
          Rx = input.ReadInt32();
          break;
        }
        case 48: {
          Ry = input.ReadInt32();
          break;
        }
        case 56: {
          Rz = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class OperateRes : pb::IMessage<OperateRes> {
  private static readonly pb::MessageParser<OperateRes> _parser = new pb::MessageParser<OperateRes>(() => new OperateRes());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OperateRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MysocketReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OperateRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OperateRes(OperateRes other) : this() {
    name_ = other.name_;
    mx_ = other.mx_;
    my_ = other.my_;
    mz_ = other.mz_;
    rx_ = other.rx_;
    ry_ = other.ry_;
    rz_ = other.rz_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OperateRes Clone() {
    return new OperateRes(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "mx" field.</summary>
  public const int MxFieldNumber = 2;
  private int mx_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Mx {
    get { return mx_; }
    set {
      mx_ = value;
    }
  }

  /// <summary>Field number for the "my" field.</summary>
  public const int MyFieldNumber = 3;
  private int my_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int My {
    get { return my_; }
    set {
      my_ = value;
    }
  }

  /// <summary>Field number for the "mz" field.</summary>
  public const int MzFieldNumber = 4;
  private int mz_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Mz {
    get { return mz_; }
    set {
      mz_ = value;
    }
  }

  /// <summary>Field number for the "rx" field.</summary>
  public const int RxFieldNumber = 5;
  private int rx_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Rx {
    get { return rx_; }
    set {
      rx_ = value;
    }
  }

  /// <summary>Field number for the "ry" field.</summary>
  public const int RyFieldNumber = 6;
  private int ry_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Ry {
    get { return ry_; }
    set {
      ry_ = value;
    }
  }

  /// <summary>Field number for the "rz" field.</summary>
  public const int RzFieldNumber = 7;
  private int rz_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Rz {
    get { return rz_; }
    set {
      rz_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OperateRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OperateRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Mx != other.Mx) return false;
    if (My != other.My) return false;
    if (Mz != other.Mz) return false;
    if (Rx != other.Rx) return false;
    if (Ry != other.Ry) return false;
    if (Rz != other.Rz) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Mx != 0) hash ^= Mx.GetHashCode();
    if (My != 0) hash ^= My.GetHashCode();
    if (Mz != 0) hash ^= Mz.GetHashCode();
    if (Rx != 0) hash ^= Rx.GetHashCode();
    if (Ry != 0) hash ^= Ry.GetHashCode();
    if (Rz != 0) hash ^= Rz.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Mx != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Mx);
    }
    if (My != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(My);
    }
    if (Mz != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Mz);
    }
    if (Rx != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Rx);
    }
    if (Ry != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Ry);
    }
    if (Rz != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Rz);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Mx != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mx);
    }
    if (My != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(My);
    }
    if (Mz != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mz);
    }
    if (Rx != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rx);
    }
    if (Ry != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ry);
    }
    if (Rz != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rz);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OperateRes other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Mx != 0) {
      Mx = other.Mx;
    }
    if (other.My != 0) {
      My = other.My;
    }
    if (other.Mz != 0) {
      Mz = other.Mz;
    }
    if (other.Rx != 0) {
      Rx = other.Rx;
    }
    if (other.Ry != 0) {
      Ry = other.Ry;
    }
    if (other.Rz != 0) {
      Rz = other.Rz;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 16: {
          Mx = input.ReadInt32();
          break;
        }
        case 24: {
          My = input.ReadInt32();
          break;
        }
        case 32: {
          Mz = input.ReadInt32();
          break;
        }
        case 40: {
          Rx = input.ReadInt32();
          break;
        }
        case 48: {
          Ry = input.ReadInt32();
          break;
        }
        case 56: {
          Rz = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PosSynRes : pb::IMessage<PosSynRes> {
  private static readonly pb::MessageParser<PosSynRes> _parser = new pb::MessageParser<PosSynRes>(() => new PosSynRes());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PosSynRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MysocketReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PosSynRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PosSynRes(PosSynRes other) : this() {
    name_ = other.name_;
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    rx_ = other.rx_;
    ry_ = other.ry_;
    rz_ = other.rz_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PosSynRes Clone() {
    return new PosSynRes(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 2;
  private int x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 3;
  private int y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 4;
  private int z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  /// <summary>Field number for the "rx" field.</summary>
  public const int RxFieldNumber = 5;
  private int rx_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Rx {
    get { return rx_; }
    set {
      rx_ = value;
    }
  }

  /// <summary>Field number for the "ry" field.</summary>
  public const int RyFieldNumber = 6;
  private int ry_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Ry {
    get { return ry_; }
    set {
      ry_ = value;
    }
  }

  /// <summary>Field number for the "rz" field.</summary>
  public const int RzFieldNumber = 7;
  private int rz_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Rz {
    get { return rz_; }
    set {
      rz_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PosSynRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PosSynRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (X != other.X) return false;
    if (Y != other.Y) return false;
    if (Z != other.Z) return false;
    if (Rx != other.Rx) return false;
    if (Ry != other.Ry) return false;
    if (Rz != other.Rz) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (X != 0) hash ^= X.GetHashCode();
    if (Y != 0) hash ^= Y.GetHashCode();
    if (Z != 0) hash ^= Z.GetHashCode();
    if (Rx != 0) hash ^= Rx.GetHashCode();
    if (Ry != 0) hash ^= Ry.GetHashCode();
    if (Rz != 0) hash ^= Rz.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (X != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(X);
    }
    if (Y != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Y);
    }
    if (Z != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Z);
    }
    if (Rx != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Rx);
    }
    if (Ry != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Ry);
    }
    if (Rz != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Rz);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (X != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
    }
    if (Y != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
    }
    if (Z != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
    }
    if (Rx != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rx);
    }
    if (Ry != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ry);
    }
    if (Rz != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rz);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PosSynRes other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.X != 0) {
      X = other.X;
    }
    if (other.Y != 0) {
      Y = other.Y;
    }
    if (other.Z != 0) {
      Z = other.Z;
    }
    if (other.Rx != 0) {
      Rx = other.Rx;
    }
    if (other.Ry != 0) {
      Ry = other.Ry;
    }
    if (other.Rz != 0) {
      Rz = other.Rz;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 16: {
          X = input.ReadInt32();
          break;
        }
        case 24: {
          Y = input.ReadInt32();
          break;
        }
        case 32: {
          Z = input.ReadInt32();
          break;
        }
        case 40: {
          Rx = input.ReadInt32();
          break;
        }
        case 48: {
          Ry = input.ReadInt32();
          break;
        }
        case 56: {
          Rz = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PosSynReq : pb::IMessage<PosSynReq> {
  private static readonly pb::MessageParser<PosSynReq> _parser = new pb::MessageParser<PosSynReq>(() => new PosSynReq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PosSynReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MysocketReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PosSynReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PosSynReq(PosSynReq other) : this() {
    name_ = other.name_;
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    rx_ = other.rx_;
    ry_ = other.ry_;
    rz_ = other.rz_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PosSynReq Clone() {
    return new PosSynReq(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 2;
  private int x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 3;
  private int y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 4;
  private int z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  /// <summary>Field number for the "rx" field.</summary>
  public const int RxFieldNumber = 5;
  private int rx_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Rx {
    get { return rx_; }
    set {
      rx_ = value;
    }
  }

  /// <summary>Field number for the "ry" field.</summary>
  public const int RyFieldNumber = 6;
  private int ry_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Ry {
    get { return ry_; }
    set {
      ry_ = value;
    }
  }

  /// <summary>Field number for the "rz" field.</summary>
  public const int RzFieldNumber = 7;
  private int rz_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Rz {
    get { return rz_; }
    set {
      rz_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PosSynReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PosSynReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (X != other.X) return false;
    if (Y != other.Y) return false;
    if (Z != other.Z) return false;
    if (Rx != other.Rx) return false;
    if (Ry != other.Ry) return false;
    if (Rz != other.Rz) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (X != 0) hash ^= X.GetHashCode();
    if (Y != 0) hash ^= Y.GetHashCode();
    if (Z != 0) hash ^= Z.GetHashCode();
    if (Rx != 0) hash ^= Rx.GetHashCode();
    if (Ry != 0) hash ^= Ry.GetHashCode();
    if (Rz != 0) hash ^= Rz.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (X != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(X);
    }
    if (Y != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Y);
    }
    if (Z != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Z);
    }
    if (Rx != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Rx);
    }
    if (Ry != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Ry);
    }
    if (Rz != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Rz);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (X != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
    }
    if (Y != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
    }
    if (Z != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
    }
    if (Rx != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rx);
    }
    if (Ry != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ry);
    }
    if (Rz != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rz);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PosSynReq other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.X != 0) {
      X = other.X;
    }
    if (other.Y != 0) {
      Y = other.Y;
    }
    if (other.Z != 0) {
      Z = other.Z;
    }
    if (other.Rx != 0) {
      Rx = other.Rx;
    }
    if (other.Ry != 0) {
      Ry = other.Ry;
    }
    if (other.Rz != 0) {
      Rz = other.Rz;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 16: {
          X = input.ReadInt32();
          break;
        }
        case 24: {
          Y = input.ReadInt32();
          break;
        }
        case 32: {
          Z = input.ReadInt32();
          break;
        }
        case 40: {
          Rx = input.ReadInt32();
          break;
        }
        case 48: {
          Ry = input.ReadInt32();
          break;
        }
        case 56: {
          Rz = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///每一帧的帧头
/// </summary>
public sealed partial class FramHead : pb::IMessage<FramHead> {
  private static readonly pb::MessageParser<FramHead> _parser = new pb::MessageParser<FramHead>(() => new FramHead());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FramHead> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MysocketReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FramHead() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FramHead(FramHead other) : this() {
    framid_ = other.framid_;
    optnum_ = other.optnum_;
    framend_ = other.framend_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FramHead Clone() {
    return new FramHead(this);
  }

  /// <summary>Field number for the "framid" field.</summary>
  public const int FramidFieldNumber = 1;
  private int framid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Framid {
    get { return framid_; }
    set {
      framid_ = value;
    }
  }

  /// <summary>Field number for the "optnum" field.</summary>
  public const int OptnumFieldNumber = 2;
  private int optnum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Optnum {
    get { return optnum_; }
    set {
      optnum_ = value;
    }
  }

  /// <summary>Field number for the "framend" field.</summary>
  public const int FramendFieldNumber = 3;
  private bool framend_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Framend {
    get { return framend_; }
    set {
      framend_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FramHead);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FramHead other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Framid != other.Framid) return false;
    if (Optnum != other.Optnum) return false;
    if (Framend != other.Framend) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Framid != 0) hash ^= Framid.GetHashCode();
    if (Optnum != 0) hash ^= Optnum.GetHashCode();
    if (Framend != false) hash ^= Framend.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Framid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Framid);
    }
    if (Optnum != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Optnum);
    }
    if (Framend != false) {
      output.WriteRawTag(24);
      output.WriteBool(Framend);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Framid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Framid);
    }
    if (Optnum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Optnum);
    }
    if (Framend != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FramHead other) {
    if (other == null) {
      return;
    }
    if (other.Framid != 0) {
      Framid = other.Framid;
    }
    if (other.Optnum != 0) {
      Optnum = other.Optnum;
    }
    if (other.Framend != false) {
      Framend = other.Framend;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Framid = input.ReadInt32();
          break;
        }
        case 16: {
          Optnum = input.ReadInt32();
          break;
        }
        case 24: {
          Framend = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
///一帧中的操作描述
/// </summary>
public sealed partial class FramOpt : pb::IMessage<FramOpt> {
  private static readonly pb::MessageParser<FramOpt> _parser = new pb::MessageParser<FramOpt>(() => new FramOpt());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FramOpt> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MysocketReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FramOpt() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FramOpt(FramOpt other) : this() {
    id_ = other.id_;
    doplayername_ = other.doplayername_;
    optype_ = other.optype_;
    dir_ = other.dir_;
    skillid_ = other.skillid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FramOpt Clone() {
    return new FramOpt(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "doplayername" field.</summary>
  public const int DoplayernameFieldNumber = 2;
  private string doplayername_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Doplayername {
    get { return doplayername_; }
    set {
      doplayername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "optype" field.</summary>
  public const int OptypeFieldNumber = 3;
  private int optype_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Optype {
    get { return optype_; }
    set {
      optype_ = value;
    }
  }

  /// <summary>Field number for the "dir" field.</summary>
  public const int DirFieldNumber = 4;
  private int dir_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Dir {
    get { return dir_; }
    set {
      dir_ = value;
    }
  }

  /// <summary>Field number for the "skillid" field.</summary>
  public const int SkillidFieldNumber = 5;
  private int skillid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Skillid {
    get { return skillid_; }
    set {
      skillid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FramOpt);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FramOpt other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Doplayername != other.Doplayername) return false;
    if (Optype != other.Optype) return false;
    if (Dir != other.Dir) return false;
    if (Skillid != other.Skillid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Doplayername.Length != 0) hash ^= Doplayername.GetHashCode();
    if (Optype != 0) hash ^= Optype.GetHashCode();
    if (Dir != 0) hash ^= Dir.GetHashCode();
    if (Skillid != 0) hash ^= Skillid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Doplayername.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Doplayername);
    }
    if (Optype != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Optype);
    }
    if (Dir != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Dir);
    }
    if (Skillid != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Skillid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Doplayername.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Doplayername);
    }
    if (Optype != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Optype);
    }
    if (Dir != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dir);
    }
    if (Skillid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skillid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FramOpt other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Doplayername.Length != 0) {
      Doplayername = other.Doplayername;
    }
    if (other.Optype != 0) {
      Optype = other.Optype;
    }
    if (other.Dir != 0) {
      Dir = other.Dir;
    }
    if (other.Skillid != 0) {
      Skillid = other.Skillid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          Doplayername = input.ReadString();
          break;
        }
        case 24: {
          Optype = input.ReadInt32();
          break;
        }
        case 32: {
          Dir = input.ReadInt32();
          break;
        }
        case 40: {
          Skillid = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///帧包数据
/// </summary>
public sealed partial class FramPackage : pb::IMessage<FramPackage> {
  private static readonly pb::MessageParser<FramPackage> _parser = new pb::MessageParser<FramPackage>(() => new FramPackage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FramPackage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MysocketReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FramPackage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FramPackage(FramPackage other) : this() {
    framid_ = other.framid_;
    framend_ = other.framend_;
    opts_ = other.opts_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FramPackage Clone() {
    return new FramPackage(this);
  }

  /// <summary>Field number for the "framid" field.</summary>
  public const int FramidFieldNumber = 1;
  private int framid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Framid {
    get { return framid_; }
    set {
      framid_ = value;
    }
  }

  /// <summary>Field number for the "framend" field.</summary>
  public const int FramendFieldNumber = 2;
  private bool framend_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Framend {
    get { return framend_; }
    set {
      framend_ = value;
    }
  }

  /// <summary>Field number for the "opts" field.</summary>
  public const int OptsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::FramOpt> _repeated_opts_codec
      = pb::FieldCodec.ForMessage(26, global::FramOpt.Parser);
  private readonly pbc::RepeatedField<global::FramOpt> opts_ = new pbc::RepeatedField<global::FramOpt>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::FramOpt> Opts {
    get { return opts_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FramPackage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FramPackage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Framid != other.Framid) return false;
    if (Framend != other.Framend) return false;
    if(!opts_.Equals(other.opts_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Framid != 0) hash ^= Framid.GetHashCode();
    if (Framend != false) hash ^= Framend.GetHashCode();
    hash ^= opts_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Framid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Framid);
    }
    if (Framend != false) {
      output.WriteRawTag(16);
      output.WriteBool(Framend);
    }
    opts_.WriteTo(output, _repeated_opts_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Framid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Framid);
    }
    if (Framend != false) {
      size += 1 + 1;
    }
    size += opts_.CalculateSize(_repeated_opts_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FramPackage other) {
    if (other == null) {
      return;
    }
    if (other.Framid != 0) {
      Framid = other.Framid;
    }
    if (other.Framend != false) {
      Framend = other.Framend;
    }
    opts_.Add(other.opts_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Framid = input.ReadInt32();
          break;
        }
        case 16: {
          Framend = input.ReadBool();
          break;
        }
        case 26: {
          opts_.AddEntriesFrom(input, _repeated_opts_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///客户端发送的操作请求
/// </summary>
public sealed partial class OptReq : pb::IMessage<OptReq> {
  private static readonly pb::MessageParser<OptReq> _parser = new pb::MessageParser<OptReq>(() => new OptReq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OptReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MysocketReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OptReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OptReq(OptReq other) : this() {
    optype_ = other.optype_;
    dir_ = other.dir_;
    skillid_ = other.skillid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OptReq Clone() {
    return new OptReq(this);
  }

  /// <summary>Field number for the "optype" field.</summary>
  public const int OptypeFieldNumber = 1;
  private int optype_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Optype {
    get { return optype_; }
    set {
      optype_ = value;
    }
  }

  /// <summary>Field number for the "dir" field.</summary>
  public const int DirFieldNumber = 2;
  private int dir_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Dir {
    get { return dir_; }
    set {
      dir_ = value;
    }
  }

  /// <summary>Field number for the "skillid" field.</summary>
  public const int SkillidFieldNumber = 3;
  private int skillid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Skillid {
    get { return skillid_; }
    set {
      skillid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OptReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OptReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Optype != other.Optype) return false;
    if (Dir != other.Dir) return false;
    if (Skillid != other.Skillid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Optype != 0) hash ^= Optype.GetHashCode();
    if (Dir != 0) hash ^= Dir.GetHashCode();
    if (Skillid != 0) hash ^= Skillid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Optype != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Optype);
    }
    if (Dir != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Dir);
    }
    if (Skillid != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Skillid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Optype != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Optype);
    }
    if (Dir != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dir);
    }
    if (Skillid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skillid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OptReq other) {
    if (other == null) {
      return;
    }
    if (other.Optype != 0) {
      Optype = other.Optype;
    }
    if (other.Dir != 0) {
      Dir = other.Dir;
    }
    if (other.Skillid != 0) {
      Skillid = other.Skillid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Optype = input.ReadInt32();
          break;
        }
        case 16: {
          Dir = input.ReadInt32();
          break;
        }
        case 24: {
          Skillid = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
